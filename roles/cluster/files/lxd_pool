#!/bin/bash
#
#
#	LXD storage attach / dettach OCF Resource Agent
#	It records (in the CIB) various attributes of a node
#
# Copyright (c) 2017 Mathieu Grzybek
#                    All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#######################################################################
# Initialization:

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

#######################################################################

meta_data() {
	cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="LXDPool">
<version>1.0</version>

<longdesc lang="en">
This is a LXD pool managing agent. It creates and deletes pools.
</longdesc>
<shortdesc lang="en">Attaches a pool to a running container</shortdesc>

<parameters>
<parameter name="pool" required="1" unique="1">
<longdesc lang="en">Storage pool name</longdesc>
<shortdesc lang="en">Storage pool name (lxc storage list)</shortdesc>
</parameter>
<parameter name="source" required="1" unique="1">
<longdesc lang="en">Path of the source device</longdesc>
<shortdesc lang="en">Path of the source device</shortdesc>
<content type="string" default="0s" />
</parameter>
<parameter name="driver" required="1" unique="1">
<longdesc lang="en">Driver to use</longdesc>
<shortdesc lang="en">Driver to use</shortdesc>
<content type="string" default="0s" />
</parameter>
</parameters>

<actions>
<action name="start"   timeout="20s" />
<action name="stop"    timeout="20s" />
<action name="monitor" timeout="20s" interval="60s"/>
<action name="meta-data"  timeout="5" />
<action name="validate-all"  timeout="20s" />
</actions>
</resource-agent>
END
}

#######################################################################

LXDPool_usage() {
	cat <<END
usage: $0 {start|stop|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

LXDPool_start() {
	local _lvm_vg_name

	# Does it exist as a storage pool?
	if lxc storage show ${OCF_RESKEY_pool} > /dev/null 2>&1 ; then
		_lvm_vg_name=$(lxc storage get $OCF_RESKEY_pool lvm.vg_name)

		# Does it exist as a filesystem?
		if ! vgs $_lvm_vg_name ; then
			ocf_log err "The given LVM VG does not exist"
		fi
		return $OCF_SUCCESS
	else
		if lxc storage create ${OCF_RESKEY_pool} ${OCF_RESKEY_driver} source=${OCF_RESKEY_source} ; then
			return $OCF_SUCCESS
		fi
	fi

	return $OCF_ERR_GENERIC
}

LXDPool_stop() {
	if ! lxc storage pool detach ${OCF_RESKEY_pool} ${OCF_RESKEY_pool} ${OCF_RESKEY_container} ; then
		ocf_log err "Cannot detach the pool"
		return $OCF_ERR_GENERIC
	fi

	if ! lxc storage pool delete ${OCF_RESKEY_pool} ${OCF_RESKEY_pool} ; then
		ocf_log err "Cannot delete the pool"
		return $OCF_ERR_GENERIC
	fi

	return $OCF_SUCCESS
}

LXDPool_monitor() {
	if lxc storage list ${OCF_RESKEY_pool}|awk -F\| "/${OCF_RESKEY_pool}/ {print $5}" | grep -q 1 2>&1 >/dev/null; then
		exit $OCF_RUNNING
	fi
	exit $OCF_NOT_RUNNING
}

LXDPool_validate() {
	check_binary lxc
	return $OCF_SUCCESS
}

if [ $# -ne 1 ]; then
    LXDPool_usage
    exit $OCF_ERR_ARGS
fi

case $__OCF_ACTION in
meta-data)	meta_data
		exit $OCF_SUCCESS
		;;
start)		LXDPool_start
		;;
stop)		LXDPool_stop
		;;
monitor)	LXDPool_monitor
		;;
validate-all)	LXDPool_validate
		;;
usage|help)	LXDPool_usage
		exit $OCF_SUCCESS
		;;
*)		LXDPool_usage
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac

exit $?
