---

- name: Install | Install HA pattern (SLES only)
  zypper: type=pattern name={{ item }} state=present
  with_items:
    - ha_sles
  when: ansible_distribution == 'SLES'

- name: Install | Install corosync / pacemaker packages
  package:
    name: "{{ cluster_distro_packages }}"
    state: "{{ cluster_package_state }}"
    update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
    cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
  register: install_packages
  until: install_packages is success
  retries: 5
  delay: 2
  tags:
    - install-apt
    - install-yum
    - install-zypper

- name: Install | Install sbd package
  package:
    name: sbd
    state: "{{ cluster_package_state }}"
    update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
    cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
  when:
    - cluster_stonith_use_sbd | lower == 'true'
    - ansible_virtualization_type != 'lxc'
    - ansible_distribution != 'SLES' # included in the ha_sles pattern

- name: Install | Download pip artifacts
  when: cluster_repo_use_pip | lower == 'true'
  block:
    - name: Install | Install python-parallax using pip
      pip: name=parallax extra_args={{ pip_extra_args }}
      when: cluster_pip_parallax | lower == 'true'

    - name: Install | Install monitoring-plugins-crm using pip
      when: cluster_monitoring_use_nrpe | lower == 'true' or cluster_monitoring_use_consul | lower == 'true'
      block:
        - name: Install | Install pip
          package:
            name: "{{ cluster_distro_pip_packages }}"
            state: "{{ cluster_package_state }}"
            update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
            cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
          register: install_packages
          until: install_packages is success
          retries: 5
          delay: 2
          tags:
            - install-apt
            - install-yum
            - install-zypper

        - name: Install | Install monitoring-plugins-crm
          pip: name=monitoring-plugins-crm extra_args={{ pip_extra_args }}

- name: Install | Adds some environment variables to pacemaker service
  when:
    - cluster_systemd_service_env != None
    - cluster_systemd_service_env | length > 0
    - ansible_service_mgr == "systemd"
  block:
    - name: Install | Creates directory
      file: path=/etc/systemd/system/pacemaker.service.d state=directory

    - name: Install | Environment file
      template: src=systemd.conf.j2 dest=/etc/systemd/system/pacemaker.service.d/environment.conf
      register: environment_conf

- name: Install | Openstack fencing
  when:
    - cluster_stonith_use_openstack | lower == 'true'
  block:
    - name: Install | Install openstack_cluster_node repo packages
      package:
        name: "{{ cluster_openstack_distro_repo_packages }}"
        state: "{{ cluster_package_state }}"
        update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
        cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
      register: install_packages
      until: install_packages is success
      retries: 5
      delay: 2
      tags:
        - install-apt
        - install-yum
        - install-zypper

    - name: Install | Remove CentOS-QEMU-EV repo
      when: ansible_os_family | lower == 'redhat'
      file:
        path: /etc/yum.repos.d/CentOS-QEMU-EV.repo
        state: absent

    - name: Install | Install openstack_cluster_node packages
      package:
        name: "{{ cluster_openstack_distro_repo_packages }}"
        state: "{{ cluster_package_state }}"
        update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
        cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
      register: install_packages
      until: install_packages is success
      retries: 5
      delay: 2
      tags:
        - install-apt
        - install-yum
        - install-zypper

    - name: Install | Install openstack fencing packages
      package:
        name: "{{ cluster_distro_openstack_fencing_packages }}"
        state: "{{ cluster_package_state }}"
        update_cache: "{{ (ansible_pkg_mgr == 'apt') | ternary('yes', omit) }}"
        cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
      register: install_packages
      until: install_packages is success
      retries: 5
      delay: 2
      tags:
        - install-apt
        - install-yum
        - install-zypper

    - name: Install | Get installed stonith agents
      command: stonith_admin -I
      register: stonith_agents

    - name: Install | Check if fence_openstack have been installed by fencing packages
      when: stonith_agents.stdout.find('fence_openstack') > -1
      set_fact:
        install_openstack_fencing_from_github: false

    - name: Install | Copy openstack fencing agent
      when:
        - install_openstack_fencing_from_github | lower == 'true'
      copy: src="{{ item.src }}" dest="{{ item.dest }}" mode={{ item.mode }}
      with_items:
        - src: "{{ cluster_stonith_openstack_fencing_repo_path }}/agents/openstack/fence_openstack.py"
          dest: "{{ cluster_usr_prefix }}/sbin/fence_openstack"
          mode: 755
        #- src: "{{ cluster_stonith_openstack_fencing_repo_path }}/agents/openstack/fence_openstack.8"
        #  dest: "{{ cluster_usr_prefix }}/share/man/man8/"
        #  mode: 644
        - src: "{{ cluster_stonith_openstack_fencing_repo_path }}/lib/fencing.py.py"
          dest: "{{ cluster_usr_prefix }}/share/fence/"
          mode: 644



