---

- name: Checks
  run_once: true
  block:
    - name: Check if all the expected nodes are alive (using inventory)
      fail: msg="Some nodes are unavailable. Expected {{ cluster_expected_votes }}, got {{ play_hosts | length }}"
      when:
        - cluster_expected_votes != play_hosts | length
        - cluster_transport | lower == 'udpu'
        - not ansible_local.cluster_nodes is defined

    - name: Check if all the expected nodes are alive (using local fact)
      fail: msg="Some nodes are unavailable. Expected {{ cluster_expected_votes }}, got {{ ansible_local.cluster_nodes | length }}"
      when:
        - ansible_local.cluster_nodes is defined
        - cluster_expected_votes != ansible_local.cluster_nodes | length
        - cluster_transport | lower == 'udpu'

    - name: Check multicast settings
      fail: msg="A valid multicast address or cluster name must be given"
      when:
        - cluster_transport | lower != 'udpu'
        - cluster_mcast_address | ipaddr | lower == 'false'
        - cluster_name | length == 0

- name: Get consul binary path
  shell: systemctl show consul | awk '/^ExecStart=/ { gsub("path=","") ; print $2 }'
  register: consul_service
  when: cluster_monitoring_use_consul == true

- set_fact:
    use_firewalld: false

- name: Check firewalld
  when: ansible_system | lower == 'linux'
  block:
    - name: Check firewalld
      shell: systemctl is-active firewalld.service 2>/dev/null || echo ko && exit 0
      register: firewalld_service

    - set_fact:
        use_firewalld: true
      when: firewalld_service.stdout.find('active') > -1

#- name: Get installed stonith agents
#  command: stonith_admin -I
#  register: stonith_agents

- name: Check consul service
  shell: systemctl is-active consul 2>/dev/null || echo ko && exit 0
  register: consul_service

- set_fact:
    configure_consul: false

- set_fact:
    configure_consul: true
  when:
    - cluster_monitoring_use_consul == true
    - consul_service.stdout.find('inactive') < 0

- name: Create consul_bin variable
  when: cluster_monitoring_use_consul == true
  block:
    - name: Get consul path from systemd
      shell: systemctl show -p ExecStart consul|tr ' ' '\n'|awk -F= '/path=/ {print $2}'
      register: consul_bin_path

    - set_fact: consul_bin="{{ consul_bin_path.stdout }}"

- name: Deal with self-configuration
  when: hostvars | length == 0
  block:
    - name: Generate facts
      register: self_facts
      setup:
