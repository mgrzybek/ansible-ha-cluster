#!/bin/bash
# Should now conform to guidelines:
# https://github.com/ClusterLabs/resource-agents/blob/master/doc/dev-guides/ra-dev-guide.asc
#
#	LXC (Linux Containers) OCF RA.
#	Used to cluster enable the start, stop and monitoring of a LXC container.
#
# Copyright (c) 2011 AkurIT.com.au, Darren Thompson
#                    All Rights Reserved.
#
# Without limiting the rights of the original copyright holders
# This resource is licensed under GPL version 2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.

# OCF instance parameters
#       OCF_RESKEY_container
#       OCF_RESKEY_config_file
#       OCF_RESKEY_config_keys
#       OCF_RESKEY_profiles
#       OCF_RESKEY_image
#       OCF_RESKEY_ephemeral
#       OCF_RESKEY_allow_launch

# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

# Defaults
OCF_RESKEY_profiles_default="default"
: ${OCF_RESKEY_profiles=${OCF_RESKEY_profiles_default}}

OCF_RESKEY_config_file_default=""
: ${OCF_RESKEY_config_file=${OCF_RESKEY_config_file_default}}

OCF_RESKEY_config_keys_default=""
: ${OCF_RESKEY_config_keys=${OCF_RESKEY_config_keys_default}}

OCF_RESKEY_image_default="ubuntu:16.04"
: ${OCF_RESKEY_image=${OCF_RESKEY_image_default}}

OCF_RESKEY_ephemeral_default="false"
: ${OCF_RESKEY_ephemeral=${OCF_RESKEY_ephemeral_default}}

OCF_RESKEY_allow_launch_default="false"
: ${OCF_RESKEY_allow_launch=${OCF_RESKEY_allow_launch_default}}

meta_data() {
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="lxd">
	<version>0.1</version>
	<shortdesc lang="en">Manages LXD containers</shortdesc>

	<parameters>
		<parameter name="container" required="1" unique="1">
			<longdesc lang="en">The unique name for this 'Container Instance' e.g. 'test1'.</longdesc>
			<shortdesc lang="en">Container Name</shortdesc>
			<content type="string" default=""/>
		</parameter>

		<parameter name="config_file" required="0" unique="1">
			<longdesc lang="en">Absolute path to the file holding the specific configuration for this container e.g. '/etc/lxc/test1/config'.</longdesc>
			<shortdesc lang="en">The LXD config file.</shortdesc>
			<content type="string" default=""/>
		</parameter>

		<parameter name="config_keys" required="0" unique="1">
			<longdesc lang="en">List of specific configuration for this container "key:value[,key:value]"/config'.</longdesc>
			<shortdesc lang="en">LXD kv values.</shortdesc>
			<content type="string" default=""/>
		</parameter>

		<parameter name="device_keys" required="0" unique="1">
			<longdesc lang="en">List of device-related options "key:value[,key:value]"/config'.</longdesc>
			<shortdesc lang="en">LXD kv device values.</shortdesc>
			<content type="string" default=""/>
		</parameter>

		<parameter name="profiles" required="0" unique="1">
			<longdesc lang="en">Comma-separated list of profiles to apply to the container. Defaut is "default".</longdesc>
			<shortdesc lang="en">Profile name</shortdesc>
			<content type="string" default="${OCF_RESKEY_profiles}"/>
		</parameter>

		<parameter name="image" required="0" unique="1">
			<longdesc lang="en">Name of the image to download to create the container. Defaut is "ubuntu:16.04".</longdesc>
			<shortdesc lang="en">Image's name</shortdesc>
			<content type="string" default="${OCF_RESKEY_image}"/>
		</parameter>

		<parameter name="ephemeral" required="0" unique="1">
			<longdesc lang="en">Set the persistance attribute.</longdesc>
			<shortdesc lang="en">Is the container ephemeral or persistant?</shortdesc>
			<content type="boolean" default="${OCF_RESKEY_ephemeral}"/>
		</parameter>

		<parameter name="allow_launch" required="0" unique="1">
			<longdesc lang="en">If the required image is not present, lxc launch will be used instead of lxc start.</longdesc>
			<shortdesc lang="en">Allow downloading the image.</shortdesc>
			<content type="boolean" default="${OCF_RESKEY_allow_launch}"/>
		</parameter>

	</parameters>

	<actions>
		<action name="start"        timeout="10" />
		<action name="stop"         timeout="30" />
		<action name="monitor"      timeout="20" interval="60" depth="0"/>
		<action name="validate-all" timeout="20" />
		<action name="meta-data"    timeout="5" />
	</actions>
</resource-agent>
END
}

LXD_usage() {
	cat <<END
	usage: $0 {start|stop|monitor|validate-all|meta-data}

	Expects to have a fully populated OCF RA-compliant environment set.
END
}

lxd_launch() {
	local _lxd_opts
	local _ephemeral

	ocf_log debug "Launching $OCF_RESKEY_container"

	LXD_status
	if [ $? -eq $OCF_SUCCESS ]; then
		ocf_log debug "Resource $OCF_RESKEY_container is already running"
		return $OCF_SUCCESS
	fi

	ocf_log debug "default profile: ${OCF_RESKEY_profiles}"
	ocf_log debug "default ephemeral: ${OCF_RESKEY_ephemeral}"

	_lxd_opts="-p ${OCF_RESKEY_profiles}"

	if [ ${OCF_RESKEY_ephemeral} = "true" ] ; then
		ocf_log debug "set ephemeral"
		_lxd_opts="$_lxd_opts -e"
	fi

	ocf_log info "Launching" ${OCF_RESKEY_container} "using image" ${OCF_RESKEY_image}
	ocf_run lxc launch ${_lxd_opts} ${OCF_RESKEY_image} ${OCF_RESKEY_container} || exit $OCF_ERR_GENERIC

	return $OCF_SUCCESS
}

lxc_apply_profiles() {
	lxc profile apply $OCF_RESKEY_container $OCF_RESKEY_profiles
}

lxc_apply_config_file() {
	cat $OCF_RESKEY_config_file | lxc config edit $OCF_RESKEY_container
}

lxc_apply_config_keys() {
	local kv
	local k
	local v

	for kv in $(echo $OCF_RESKEY_config_keys | tr ',' '\n') ; do
		k=$(echo $kv|awk -F: '{print $1}')
		v=$(echo $kv|awk -F: '{print $2}')

		lxc config set $OCF_RESKEY_container $k $v
	done
}

lxd_start() {
	local _lxd_opts

	ocf_log debug "lxd_start: Starting $OCF_RESKEY_container"

	LXD_status
	if [ $? -eq $OCF_SUCCESS ]; then
		ocf_log debug "Resource $OCF_RESKEY_container already running"
		return $OCF_SUCCESS
	fi

	ocf_log info "Starting ${OCF_RESKEY_container}"
	ocf_run lxc start ${OCF_RESKEY_container} || exit $OCF_ERR_GENERIC

	return $OCF_SUCCESS
}

LXD_start() {
	LXD_exists
	if [ ! $? -eq $OCF_SUCCESS ] ; then
		ocf_log debug "LXD_start: The container does not exist"
		if [[ $OCF_RESKEY_allow_launch = "true" ]] ; then
			lxd_launch
			return $?
		else
			ocf_log err "LXD_start: ${OCF_RESKEY_container} is not present, but allow_launch is ${OCF_RESKEY_allow_launch}."
			return $OCF_ERR_GENERIC
		fi
	fi

	lxd_start
	return $?
}

LXD_stop() {
	LXD_status
	if [ $? -ne $OCF_SUCCESS ]; then
		ocf_log debug "Resource $OCF_RESOURCE_INSTANCE is already stopped"
		ocf_run rm -f $TRANS_RES_STATE
		return $OCF_SUCCESS
	fi

	ocf_run lxc stop $OCF_RESKEY_container 

	LXD_status
	if [ $? -eq $OCF_SUCCESS ]; then
		ocf_log info "Container" ${OCF_RESKEY_container} "is still running, force stop."
		ocf_run lxc stop -f $OCF_RESKEY_container || exit $OCF_ERR_GENERIC
	fi

	ocf_log info "Container" ${OCF_RESKEY_container} "stopped"

	return $OCF_SUCCESS
}

LXD_exists() {
	ocf_log debug "LXD_exists: check if $OCF_RESKEY_container exists"

	if lxc list -c n|grep -q ${OCF_RESKEY_container} ; then
		ocf_log debug "LXD_exists: $OCF_RESKEY_container exists"
		return $OCF_SUCCESS
	fi

	ocf_log debug "LXD_exists: $OCF_RESKEY_container does not exist"

	return $OCF_ERR_INSTALLED
}

LXD_status() {
	if lxc info $OCF_RESKEY_container | awk '/^Status/ {print $2}'|grep -iq running ; then
		return $OCF_SUCCESS
	fi
	return $OCF_NOT_RUNNING
}

LXD_monitor() {
	LXD_status && return $OCF_SUCCESS
	return $OCF_NOT_RUNNING
}


LXD_validate() {
	# Quick check that all required attributes are set
	if [ -z "${OCF_RESKEY_container}" ]; then
		ocf_log err "LXC container name not set!"
		exit $OCF_ERR_CONFIGURED
	fi
	if [ -z "${OCF_RESKEY_profiles}" ]; then
		ocf_log err "LXD profiles name not set!"
		exit $OCF_ERR_CONFIGURED
	fi

	check_binary lxc
	check_binary awk
	check_binary tr
	check_binary grep

	return $OCF_SUCCESS
}

if [ $# -ne 1 ]; then
  LXD_usage
  exit $OCF_ERR_ARGS
fi

case $__OCF_ACTION in
    meta-data)	meta_data
	exit $OCF_SUCCESS
	;;
    usage|help)	LXD_usage
	exit $OCF_SUCCESS
	;;
esac

# Everything except usage and meta-data must pass the validate test
LXD_validate

case $__OCF_ACTION in
start)		LXD_start;;
stop)		LXD_stop;;
status)	LXD_status;;
monitor)	LXD_monitor;;
validate-all)	;;
*)		LXD_usage
		ocf_log err "$0 was called with unsupported arguments: $*"
		exit $OCF_ERR_UNIMPLEMENTED
		;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
